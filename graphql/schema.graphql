type Card {
  id: String!
  description: String!
}

type BlackCard {
  id: String!
  description: String!
  cardsToDraw: Int!
}

type Deck {
  _id: String!
  name: String!
  language: String!
  createdBy: User
  public: Boolean!
  cards: [Card!]
  blackCards: [BlackCard!]
}

type User {
  _id: ID!
  nickname: String!
  name: String!
  picture: String!
  email: String
  sub: String!
}

type Player {
  _id: ID!
  user: User!
  cardCzar: Boolean!
  selectedCards: [Card!]
  cards: [Card!]
  blackCards: [BlackCard!]
}

type Game {
  status: String!
  activeBlackCard: BlackCard
  cards: [Card!]
  blackCards: [BlackCard!]
}

type Room {
  _id: ID!
  name: String!
  callLink: String
  game: Game!
  players: [Player!]!
  owner: User!
  winners: [Player]
}

input UserData {
  nickname: String!
  name: String!
  picture: String!
  email: String
  sub: String!
}

input RoomData {
  name: String!
  callLink: String
  userId: ID!
}

type RootQuery {
  user(id: ID!): User!
  player(id: ID!): Player!
  room(id: ID!): Room!
}

type RootMutation {
  createRoom(roomData: RoomData): Room!
  createPlayer(roomId: ID, userId: ID!): Player!
  getOrCreateUser(userData: UserData!): User!
  startGame(roomId: ID!): Room!
  nextRound(roomId: ID!): Room!
  updateSelectedCards(roomId: ID!, userId: ID!, selected: [String!]!): Player!
  updateWinner(roomId: ID!, userId: ID!): Room!
  endGame(roomId: ID!): Room!
}

schema {
  query: RootQuery
  mutation: RootMutation
}
